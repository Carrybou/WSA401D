{% extends 'base.html.twig' %}

{% block title %}Météo{% endblock %}

{% block body %}
    <div class="pre-info-btn">
        <form class="form-search" method="post" action="{{ path('weather_home') }}">
            <label for="city">Ville :</label>
            <input type="text" id="city" name="city" value="{{ selectedCity }}" required>
            <button class="search" type="submit">Rechercher</button>
        </form>

        {% if app.user %}
            {% if selectedCity in favoriteCities %}
                <form method="post" action="{{ path('weather_home') }}">
                    <input type="hidden" name="city" value="{{ selectedCity }}">
                    <input type="hidden" name="favorite_action" value="remove">
                    <button type="submit" class="btn-favorite btn-favorite-R">Retirer des favoris ♡</button>
                </form>
            {% else %}
                <form method="post" action="{{ path('weather_home') }}">
                    <input type="hidden" name="city" value="{{ selectedCity }}">
                    <input type="hidden" name="favorite_action" value="add">
                    <button type="submit" class="btn-favorite btn-favorite-A">Ajouter aux favoris ♥</button>
                </form>
            {% endif %}
        {% endif %}
    </div>

    {% if error %}
        <div class="error" id="error-message">{{ error|raw }}</div>
    {% endif %}

    <div id="weather-info">
        {% if weatherData[selectedCity] is defined %}

            <div class="toptier">
                <div class="chart-container">
                    <canvas id="weatherChart" width="800" height="500"></canvas>
                </div>

            
                <div class="card">
                    <h1>Météo à {{ selectedCity }}</h1>
                    <p>La température actuelle est de {{ weatherData[selectedCity].temperature }}°C.</p>
                    {% if weatherData[selectedCity].humidity is defined %}
                        <p>Humidité : {{ weatherData[selectedCity].humidity }}%</p>
                    {% endif %}
                    {% if weatherData[selectedCity].pressure is defined %}
                        <p>Pression atmosphérique : {{ weatherData[selectedCity].pressure }} hPa</p>
                    {% endif %}
                    {% if weatherData[selectedCity].wind_speed is defined %}
                        <p>Vitesse du vent : {{ weatherData[selectedCity].wind_speed }} m/s</p>
                    {% endif %}
                    {% if weatherData[selectedCity].wind_direction is defined %}
                        <p>Direction du vent : {{ weatherData[selectedCity].wind_direction }}°</p>
                    {% endif %}
                    {% if weatherData[selectedCity].cloudiness is defined %}
                        <p>Couverture nuageuse : {{ weatherData[selectedCity].cloudiness }}%</p>
                    {% endif %}
                    {% if weatherData[selectedCity].description is defined %}
                        <p>Description : {{ weatherData[selectedCity].description }}</p>
                    {% endif %}
                    {% if weatherData[selectedCity].icon is defined %}
                        <img class="icon-tab-previ5d" src="{{ asset('iconsnew/' ~ weatherData[selectedCity].icon ~ '.png') }}" alt="Weather icon">
                    {% endif %}
                </div>
            </div>

            {% if app.user %}
                <h2>Prévisions de la semaine</h2>

                <div id="column-selectors" class="filtres-tab">
                    <label><input type="checkbox" class="column-checkbox" data-column="temp_min" {% if 'temp_min' in columnPreferences %}checked{% endif %}> Temp. Min</label>
                    <label><input type="checkbox" class="column-checkbox" data-column="temp_max" {% if 'temp_max' in columnPreferences %}checked{% endif %}> Temp. Max</label>
                    <label><input type="checkbox" class="column-checkbox" data-column="wind_speed" {% if 'wind_speed' in columnPreferences %}checked{% endif %}> Vitesse du vent</label>
                    <label><input type="checkbox" class="column-checkbox" data-column="humidity" {% if 'humidity' in columnPreferences %}checked{% endif %}> Humidité</label>
                    <label><input type="checkbox" class="column-checkbox" data-column="pressure" {% if 'pressure' in columnPreferences %}checked{% endif %}> Pression</label>
                </div>

                <table class="table" id="forecast-table">
                    <thead>
                        <tr>
                            <th scope="col">Jour</th>
                            <th scope="col">Icon</th>
                            <th scope="col">Temp. Min</th>
                            <th scope="col">Temp. Max</th>
                            <th scope="col">Vitesse du vent</th>
                            <th scope="col">Humidité</th>
                            <th scope="col">Pression</th>
                        </tr>
                    </thead>
                    <tbody>
                        {% for day, data in forecastDataGrouped %}
                            <tr>
                                <td>{{ day }}</td>
                                <td><img class="icon-tab-previ5d" src="{{ asset('iconsnew/' ~ data.icon ~ '.png') }}" alt="Weather icon"></td>
                                <td>{{ data.temp_min }} °C</td>
                                <td>{{ data.temp_max }} °C</td>
                                <td>{{ data.wind_speed }} m/s</td>
                                <td>{{ data.humidity }} %</td>
                                <td>{{ data.pressure }} hPa</td>
                            </tr>
                        {% endfor %}
                    </tbody>
                </table>
            {% else %}
                <p>Connectez-vous pour pouvoir accéder aux prévisions des prochains jours.</p>
            {% endif %}



        {% else %}
            {% if not error %}
                <p>Entrez une ville pour obtenir des données météorologiques.</p>
            {% endif %}
            
            {% if app.user %}
                <h3 class="other-city">Villes favorites</h3>
                <div class="favorite-cities">
                    {% for city in favoriteCities %}
                        {% if weatherData[city] is defined %}
                            <a href="{{ path('weather_home', {'city': city}) }}"  class="weather-fav-card-a">
                                <div class="weather-card">
                                    <h3>{{ city }}</h3>
                                    <p>Température : {{ weatherData[city].temperature }}°C</p>
                                    {% if weatherData[city].humidity is defined %}
                                        <p>Humidité : {{ weatherData[city].humidity }}%</p>
                                    {% endif %}
                                    {% if weatherData[city].pressure is defined %}
                                        <p>Pression : {{ weatherData[city].pressure }} hPa</p>
                                    {% endif %}
                                    {% if weatherData[city].description is defined %}
                                        <p>Description : {{ weatherData[city].description }}</p>
                                    {% endif %}
                                    {% if weatherData[city].icon is defined %}
                                        <img class="icon-tab-previ5d icon-tab-previ5d-NoSearch" src="{{ asset('iconsnew/' ~ weatherData[city].icon ~ '.png') }}" alt="Weather icon">
                                    {% endif %}
                                </div>
                            </a>
                        {% endif %}
                    {% endfor %}
                </div>
            {% endif %}
            
            {% if app.user %}
                <h3 class="other-city">D'autres villes du monde</h3>
            {% else %}
                <h3 class="other-city">Météo villes du monde</h3>
            {% endif %}
            <div class="default-cities">
                {% for city, data in weatherData %}
                    {% if city not in favoriteCities %}
                        <a href="{{ path('weather_home', {'city': city}) }}"  class="weather-other-card-a">
                            <div class="weather-card">
                                <h3>{{ city }}</h3>
                                <p>Température : {{ data.temperature }}°C</p>
                                {% if data.humidity is defined %}
                                    <p>Humidité : {{ data.humidity }}%</p>
                                {% endif %}
                                {% if data.pressure is defined %}
                                    <p>Pression : {{ data.pressure }} hPa</p>
                                {% endif %}
                                {% if data.description is defined %}
                                    <p>Description : {{ data.description }}</p>
                                {% endif %}
                                {% if data.icon is defined %}
                                    <img class="icon-tab-previ5d icon-tab-previ5d-NoSearch" src="{{ asset('iconsnew/' ~ data.icon ~ '.png') }}" alt="Weather icon">
                                {% endif %}
                            </div>
                        </a>
                    {% endif %}
                {% endfor %}
            </div>
        {% endif %}
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const checkboxes = document.querySelectorAll('#column-selectors input[type="checkbox"]');
            const maxColumns = 2;  // Limite maximale de colonnes visibles
            const defaultColumns = ['temp_min', 'temp_max'];
            let columnPreferences = {{ columnPreferences|json_encode|raw }};

            // Si aucune préférence n'est définie, utilise les colonnes par défaut
            if (columnPreferences.length === 0) {
                columnPreferences = defaultColumns;
            }

            // Fonction pour appliquer la visibilité des colonnes
            function toggleColumnVisibility(columnName, isVisible) {
                const columnIndex = Array.from(checkboxes).findIndex(checkbox => checkbox.dataset.column === columnName) + 3;
                const table = document.getElementById('forecast-table');
                const cells = table.querySelectorAll(`th:nth-child(${columnIndex}), td:nth-child(${columnIndex})`);
                cells.forEach(cell => {
                    cell.style.display = isVisible ? '' : 'none';
                });
            }

            // Fonction pour mettre à jour l'état des cases à cocher
            function updateCheckboxStates() {
                const checkedCount = document.querySelectorAll('#column-selectors input[type="checkbox"]:checked').length;
                checkboxes.forEach(checkbox => {
                    if (!checkbox.checked) {
                        checkbox.disabled = checkedCount >= maxColumns;
                    } else {
                        checkbox.disabled = false;
                    }
                });
            }

            // Fonction pour sauvegarder les préférences des colonnes
            function saveColumnPreferences() {
                const preferences = [];
                checkboxes.forEach(function(checkbox) {
                    if (checkbox.checked) {
                        preferences.push(checkbox.dataset.column);
                    }
                });

                fetch('{{ path("save_column_preferences") }}', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest',
                        'X-CSRF-TOKEN': '{{ csrf_token("save_column_preferences") }}'
                    },
                    body: JSON.stringify({ preferences: preferences })
                });
            }

            // Applique la visibilité initiale basée sur les préférences ou les colonnes par défaut
            checkboxes.forEach(checkbox => {
                const column = checkbox.dataset.column;
                const isChecked = columnPreferences.includes(column);
                checkbox.checked = isChecked;
                toggleColumnVisibility(column, isChecked);
            });

            updateCheckboxStates();

            // Écoute les changements des cases à cocher
            checkboxes.forEach(checkbox => {
                checkbox.addEventListener('change', function() {
                    const checkedCount = document.querySelectorAll('#column-selectors input[type="checkbox"]:checked').length;
                    if (checkedCount > maxColumns) {
                        alert('Vous ne pouvez afficher que deux colonnes à la fois. Veuillez décocher une autre colonne avant de sélectionner celle-ci.');
                        checkbox.checked = false;
                    } else {
                        toggleColumnVisibility(this.dataset.column, this.checked);
                        saveColumnPreferences();
                    }
                    updateCheckboxStates();
                });
            });
        });
    </script>





    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        const ctx = document.getElementById('weatherChart').getContext('2d');
        let delayed = false;
        const weatherChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: {{ chartData.labels|json_encode|raw }},
                datasets: [{
                    type: 'line',
                    label: 'Température',
                    borderRadius: 6,
                    cubicInterpolationMode: 'monotone',
                    borderSkipped: false,
                    data: {{ chartData.temperature|json_encode|raw }},
                    borderColor: 'coral',
                    fill: false,
                    yAxisID: 'temp',
                }, {
                    label: 'Vitesse du vent',
                    borderRadius: 10,
                    borderColor: 'white',
                    backgroundColor: 'rgba(255, 255, 255, 0.3)',
                    data: {{ chartData.windSpeed|json_encode|raw }},
                    yAxisID: 'wind',
                }]
            },
            options: {

                animation: {
                    onComplete: () => {
                        delayed = true;
                    },
                    delay: (context) => {
                        let delay = 0;
                        if (context.type === 'data' && context.mode === 'default' && !delayed) {
                            delay = context.dataIndex * 300 + context.datasetIndex * 100;
                        }
                        return delay;
                    },
                },
                scales: {
                    x: {
                        ticks: {
                            color: 'white',
                            font: {
                                size: 16
                            }
                        }
                    },
                    temp: {
                        type: 'linear',
                        position: 'left',
                        ticks: {
                            color: 'white',
                            font: {
                                size: 16
                            }
                        }
                    },
                    wind: {
                        type: 'linear',
                        position: 'right',
                        ticks: {
                            color: 'white',
                            font: {
                                size: 16
                            }
                        },

                        grid: {
                            drawOnChartArea: false,
                        },
                    }
                }
            }
        });
        weatherChart.resize();
    </script>
{% endblock %}
